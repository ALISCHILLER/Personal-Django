"""
Django settings for djangoProject project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

APPEND_SLASH = False
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kf1zyuh-nx4@0!(t8je$s@uu8u3ctmi1rf*q9l%q__i%@7n^1g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'corsheaders',
    'rest_framework.authtoken',
    'EmployeeApp.apps.EmployeeappConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]





# اگر بخواهید فقط دامنه‌های خاصی دسترسی داشته باشند، می‌توانید از CORS_ALLOWED_ORIGINS استفاده کنید
# CORS_ALLOWED_ORIGINS = [
#     "https://example.com",  # فقط این دامنه‌ها اجازه دارند درخواست ارسال کنند
#     "https://sub.example.com",
# ]


# اجازه دادن به همه دامنه‌ها برای دسترسی به سرور
# وقتی این مقدار True باشد، همه دامنه‌ها می‌توانند به API دسترسی داشته باشند
CORS_ALLOW_ALL_ORIGINS = True  # در محیط توسعه مفید است اما در تولید نباید از آن استفاده شود

# اجازه دادن به درخواست‌های احراز هویت‌شده مثل درخواست‌هایی که حاوی کوکی یا هدر Authorization هستند
CORS_ALLOW_CREDENTIALS = True  # این گزینه برای درخواست‌هایی که نیاز به احراز هویت دارند استفاده می‌شود






# تعریف روش‌های HTTP مجاز (مانند GET، POST، PUT، DELETE)
# CORS_ALLOW_METHODS = [
#     "GET",     # اجازه دسترسی به درخواست‌های GET
#     "POST",    # اجازه دسترسی به درخواست‌های POST
#     "PUT",     # اجازه دسترسی به درخواست‌های PUT
#     "DELETE",  # اجازه دسترسی به درخواست‌های DELETE
# ]
#
# # تعریف هدرهای مجاز که می‌توانند از سوی کلاینت ارسال شوند
# CORS_ALLOW_HEADERS = [
#     "content-type",  # هدر Content-Type باید مجاز باشد
#     "authorization",  # هدر Authorization برای ارسال توکن‌های JWT
# ]
#
# # تعریف هدرهایی که در پاسخ سرور به کلاینت نمایش داده می‌شوند
# CORS_EXPOSE_HEADERS = [
#     "X-Custom-Header",  # هدرهای سفارشی که در پاسخ سرور نمایش داده می‌شوند
#     "Content-Length",   # هدر طول محتوا (Content-Length) را در پاسخ قرار می‌دهد
# ]
#
# # تنظیم مدت زمان کش کردن درخواست‌های preflight در مرورگر (به ثانیه)
# CORS_PREFLIGHT_MAX_AGE = 86400  # مرورگر می‌تواند پاسخ preflight را تا 24 ساعت کش کند
#
# # محدود کردن CORS به URLهای خاص با استفاده از regex
# CORS_URLS_REGEX = r'^/api/.*$'  # فقط URLهایی که با /api/ شروع می‌شوند تحت تنظیمات CORS قرار می‌گیرند



# اضافه کردن middleware مربوط به corsheaders برای مدیریت درخواست‌های CORS
# MIDDLEWARE = [
#     'corsheaders.middleware.CorsMiddleware',  # این middleware به درخواست‌ها هدرهای CORS اضافه می‌کند
#     'django.middleware.common.CommonMiddleware',  # این middleware برای مدیریت تنظیمات عمومی HTTP استفاده می‌شود
# ]
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangoProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'restapidb',
        'USER': 'postgres',
        'PASSWORD': 'As@123456',
        'HOST': 'localhost',
        'PORT':'5432'
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
